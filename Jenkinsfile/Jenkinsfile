pipeline {
  environment{
    USER_CREDENTIAL = credentials('dockerhub-bago-js')
    DOCKER_REPOSITORY = 'https://registry.hub.docker.com'
    HELM_REPOSITORY = 'helm-internal'
    PROJECT_NAME = 'frontbagoimage'
    DEPLOY_CONTEXT = '/msBagoFrontend/'
    PROJECT_VERSION = 'latest'
    docker = tool 'docker2'
    dockerimagename = 'juanse793/frontbagoimage:latest'
  }

  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            app: test
        spec:
          hostAliases:
          - ip: "192.168.5.67"
            hostnames:
              - "nexusdev.krugercorp.com"
          - ip: "192.168.5.67"
            hostnames:
              - "dockerdev.krugercorp.com"
          - ip: "192.168.5.27"
            hostnames:
              - "sonarqubekrugercorp.com"
          - ip: "192.168.5.68"
            hostnames:
              - "jenkinsdev.krugercorp.com"
          containers:
          - name: node
            env:
              - name: 'HOME'
                value: '.'
            image: node:16.17.0-alpine3.16
            command:
            - cat
            tty: true
          - name: docker
            image: docker:24.0.0-cli-alpine3.18
            command:
            - cat
            tty: true
            volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-sock
          - name: helm
            image: alpine/helm:3.10.0
            command:
            - cat
            tty: true
          volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock
      '''
    }
  }
  stages {
    stage('SonarQube Analysis') {
      steps {
        script {
          def scannerHome = tool 'SonarScanner';
          withSonarQubeEnv('sonar-server') {
              sh "${scannerHome}/bin/sonar-scanner -X -Dsonar.projectKey=bago-poc-frontend-jenk"
          }
        }
      }
    }
    stage("Quality Gate") {
      steps {
        timeout(time: 1, unit: 'HOURS') {
          steps {
              script {
                  def qg = waitForQualityGate()
                  if (qg.status != 'OK') {
                      error "Pipeline aborted due to quality gate failure: ${qg.status}"
                  }
              }
          }
        }
      }
    }


    stage('Build and publish docker image') {
      when { expression { true } }
      steps {
        container('docker') {
          sh 'chmod 0777 /var/run/docker.sock' 
          sh 'docker logout'
          sh 'cd $HOME'
          //sh 'docker login $DOCKER_REPOSITORY -u juanse793 -p Nachito2020@'
    
          sh 'docker build . -t docker.io/juanse793/frontbagoimage:latest --load'

          //sh 'docker image ls'
          

        }
      }

      

      
     
      
      
    }
    stage('Push image') {

      steps {
        container('docker') {
         // sh 'docker logout'
         // sh 'cd $HOME'
         // sh 'docker login $DOCKER_REPOSITORY -u juanse793 -p Nachito2020@'
         // sh 'docker image ls'
          //sh "docker push juanse793/frontbagoimage:latest"
          withCredentials([usernamePassword(credentialsId: 'dockerhub-bago-js', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                        sh "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD"
                        sh "docker push $dockerimagename"
                        sh "docker rmi $dockerimagename"
                    }
           

        }
      }
       
    }
  }
  
  
}
